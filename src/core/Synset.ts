import LemmaGroup from './LemmaGroup';
import Lemma from './Lemma';
import { Annotation } from './Annotation';

type SynsetOptions = {
  autogenerated: boolean;
  debatable: boolean;
  groups: LemmaGroup[];
};

export type SynsetMetadata = {
  autogenerated: boolean;
  debatable: boolean;
};

export class Synset {
  constructor(options: Partial<SynsetOptions> = {}) {
    this.meta = {
      autogenerated: options.autogenerated ?? true,
      debatable: options.debatable ?? false,
    };

    this.groups = options.groups || [];
  }

  public meta: SynsetMetadata;
  public groups: LemmaGroup[];

  public *lemmas(): IterableIterator<Lemma> {
    for (const group of this.groups) {
      yield* group.lemmas;
    }
  }

  public *annotations(): IterableIterator<Annotation> {
    for (const lemma of this.lemmas()) {
      yield* lemma.annotations;
    }
  }

  public toString(): string {
    return (
      (this.meta.debatable ? '#' : '') +
      (this.meta.autogenerated ? '!' : '') +
      this.groups.map(String).join('; ')
    );
  }
}
