import * as metacharacters from './metacharacters';

describe('metacharacters', () => {
  describe('.isAutogenerated()', () => {
    test.each([
      [false, ''],
      [false, '#'],
      [true, '!'],
      [true, '!#'],
      [true, '#!'],
      [false, 'a'],
      [false, '#a'],
      [false, 'a!'],
      [true, '!a'],
      [true, '!#a'],
      [true, '#!a'],
    ])('should return %j for %j', (expected, input) => {
      expect(metacharacters.isAutogenerated(input)).toBe(expected);
    });
  });

  describe('.isDebatable()', () => {
    test.each([
      [false, ''],
      [true, '#'],
      [false, '!'],
      [true, '!#'],
      [true, '#!'],
      [false, 'a'],
      [true, '#a'],
      [false, 'a#'],
      [true, '#a'],
      [true, '!#a'],
      [true, '#!a'],
    ])('should return %j for %j', (expected, input) => {
      expect(metacharacters.isDebatable(input)).toBe(expected);
    });
  });

  describe('.stripMetacharacters()', () => {
    test.each([
      ['', ''],
      ['#', ''],
      ['!', ''],
      ['!#', ''],
      ['#!', ''],
      ['a', 'a'],
      ['#a', 'a'],
      ['!a', 'a'],
      ['#!a', 'a'],
      ['!#a', 'a'],
      ['a#', 'a#'],
      ['a!', 'a!'],
    ])('should convert %j into %j', (input, expected) => {
      expect(metacharacters.stripMetacharacters(input)).toBe(expected);
    });
  });
});
